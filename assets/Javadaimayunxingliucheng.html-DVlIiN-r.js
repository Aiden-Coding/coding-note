import{_ as c,r as o,o as p,c as d,a as n,b as a,d as s,w as t,e as l}from"./app-BihAYnmf.js";const u="/coding-note/assets/image-74-PpAuu4k0.png",r="/coding-note/assets/image-75-CrlVUlqq.png",v="/coding-note/assets/image-76-CybZqh1R.png",m="/coding-note/assets/image-151-C6OkC6fX.png",k="/coding-note/assets/image-152-qm-yW5D9.png",g="/coding-note/assets/image-153-CQyy7YpO.png",b="/coding-note/assets/image-154-TLLCCE6H.png",_="/coding-note/assets/image-155-hPiZfZpi.png",h="/coding-note/assets/image-156-1CnrOtos.png",j="/coding-note/assets/image-157-CWawQVRD.png",J="/coding-note/assets/image-158-DDgS7bPt.png",f="/coding-note/assets/image-159-ChGLHrO7.png",x="/coding-note/assets/image-160-CrJFObPJ.png",y="/coding-note/assets/image-161-BBRl56cy.png",w="/coding-note/assets/image-162-DlFFSAXD.png",A="/coding-note/assets/image-163-C8ZPTOsa.png",L={},V=n("h1",{id:"第二节-jvm-如何运行-java-代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第二节-jvm-如何运行-java-代码"},[n("span",null,"第二节：JVM 如何运行 Java 代码？")])],-1),S=l(`<p>“三妹，我们通常把 Java 代码执行的过程分为编译期和运行时，弄清楚这两个阶段就知道原因了。”我微笑着对三妹说，“对于一个 Java 程序员来说，写了那么久的代码，总要搞清楚自己写的 Java 代码到底是怎么运行起来的。这个问题在面试的时候也经常会被问到。”</p><h2 id="编译期" tabindex="-1"><a class="header-anchor" href="#编译期"><span>编译期</span></a></h2><p>贴一下 HelloWorld 这段代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 微信搜「沉默王二」，回复关键字 PDF
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;三妹，少看手机少打游戏，好好学，美美哒。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击 IDEA 工具栏中的锤子按钮（Build Project，编译整个项目，通常情况下，并不需要主动编译，IDEA 会自动帮我们编译），如下图所示。</p><p><img src="`+u+'" alt="Alt text"></p><p>这时候，就可以在 src 的同级目录 target 下找到一个名为 HelloWorld.class 的文件。</p><p><img src="'+r+'" alt="Alt text"></p><p>如果找不到的话，在目录上右键选择「Reload from Disk，从磁盘上重新加载」，如下图所示：</p><p><img src="'+v+`" alt="Alt text"></p><p>可以双击打开它。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//</span>
<span class="token comment">// Source code recreated from a .class file by IntelliJ IDEA</span>
<span class="token comment">// (powered by Fernflower decompiler)</span>
<span class="token comment">//</span>

<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itwanger<span class="token punctuation">.</span>five</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;三妹，少看手机少打游戏，好好学，美美哒。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),E={href:"https://github.com/fesh0r/fernflower",target:"_blank",rel:"noopener noreferrer"},I=l(`<p>但实际上，字节码文件并不是这样的，包含了 Java 虚拟机（JVM）执行的指令，还有类的元数据信息，如类名、方法和属性等。如果用 「show bytecode」打开字节码文件的话，它是下面这样子的：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// class version 58.0 (58)
// access flags 0x21
public class com/itwanger/five/HelloWorld {

  // compiled from: HelloWorld.java

  // access flags 0x1
  public &lt;init&gt;()V
   L0
    LINENUMBER 6 L0
    ALOAD 0
    INVOKESPECIAL java/lang/Object.&lt;init&gt; ()V
    RETURN
   L1
    LOCALVARIABLE this Lcom/itwanger/five/HelloWorld; L0 L1 0
    MAXSTACK = 1
    MAXLOCALS = 1

  // access flags 0x9
  public static main([Ljava/lang/String;)V
   L0
    LINENUMBER 8 L0
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;
    LDC &quot;\\u4e09\\u59b9\\uff0c\\u5c11\\u770b\\u624b\\u673a\\u5c11\\u6253\\u6e38\\u620f\\uff0c\\u597d\\u597d\\u5b66\\uff0c\\u7f8e\\u7f8e\\u54d2\\u3002&quot;
    INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/String;)V
   L1
    LINENUMBER 9 L1
    RETURN
   L2
    LOCALVARIABLE args [Ljava/lang/String; L0 L2 0
    MAXSTACK = 2
    MAXLOCALS = 1
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),M=n("p",null,"那这个 bytecode 是怎么看到的呢？",-1),q=n("p",null,"可以通过 IDEA 菜单栏中的「View」→「Show Bytecode」查看，如下图所示。",-1),C=n("p",null,[n("img",{src:m,alt:"Alt text"})],-1),D=n("p",null,"这个 bytecode 可以直译为字节码。",-1),T=l('<p><img src="'+k+'" alt="Alt text"></p><p>Windows、Linux、MacOS 等操作系统都有相应的 JDK，只要安装好了 JDK 就有了 Java 语言的运行时环境，就可以把 Java 源代码编译为字节码，然后字节码又可以在不同的操作系统上运行了。</p><p>build once，run anywhere。</p><h3 id="jclasslib" tabindex="-1"><a class="header-anchor" href="#jclasslib"><span>jclasslib</span></a></h3><p>查看字节码，相比 IDEA 自带的「Show Bytecode」，我更推荐 <code>jclasslib</code> 这款插件，可以在 Intellij IDEA 插件市场中安装。</p><p><img src="'+g+'" alt="Alt text"></p><p>安装完成之后，点击 View -&gt; Show Bytecode With jclasslib 即可通过 jclasslib 查看字节码文件了（点击之前，光标要停留在对应的类文件上），如下图所示。</p><p><img src="'+b+'" alt="Alt text"></p>',8),R=n("p",null,[n("img",{src:_,alt:"Alt text"})],-1),W=n("p",null,[a("也就是说，"),n("strong",null,"在编译阶段，Java 会将 Java 源代码文件编译为字节码文件"),a("。")],-1),H=n("p",null,[n("img",{src:h,alt:"Alt text"})],-1),P=n("p",null,[n("img",{src:j,alt:"Alt text"})],-1),B=n("p",null,"在编译这个阶段，编译器会进行一些检查工作，比如说，某个关键字是不是写错了（private 写成 provate），语法上是不是符合预期，不能有很明显的错误，要提前检查出来，不能带到运行时。",-1),O=n("h2",{id:"运行时",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#运行时"},[n("span",null,"运行时")])],-1),N=n("p",null,[n("img",{src:J,alt:"Alt text"})],-1),U=n("p",null,"Java 字节码是 JVM 执行的指令集，每个指令由一个操作码（opcode）和零个或多个操作数（operands）组成。",-1),F=n("ul",null,[n("li",null,"操作码：一个字节大小的指令，用于表示具体的操作（如加法、加载变量等）。"),n("li",null,"操作数：跟随操作码，用于提供额外信息（如变量索引、常量值等）。")],-1),K=l(`<blockquote><p>javap 命令可以从编译后的 .class 文件中提取出源代码和元数据信息，并将其显示在命令行界面上。</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>0 getstatic #2 &lt;java/lang/System.out&gt;
3 ldc #3 &lt;Hello World&gt;
5 invokevirtual #4 &lt;java/io/PrintStream.println&gt;
8 return
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段字节码的意思是调用 System.out.println 方法打印&quot;Hello World&quot;字符串。下面是详细的解释：</p><ol><li><p><code>0: getstatic #2 &lt;java/lang/System.out&gt;</code></p><ul><li>操作码：getstatic</li><li>操作数：#2</li><li>描述：这条指令的作用是获取静态字段，这里获取的是<code>java.lang.System</code>类的<code>out</code>静态字段，它是一个<code>PrintStream</code>类型的输出流。#2 是一个指向常量池的索引，常量池里存储了<code>java/lang/System.out</code>的引用信息。执行这条指令后，<code>System.out</code>的引用会被压入操作数栈顶。</li></ul></li><li><p><code>3: ldc #3 &lt;Hello World&gt;</code></p><ul><li>操作码：ldc</li><li>操作数：#3</li><li>描述：这条指令的作用是从常量池中加载一个常量值（这里是字符串&quot;Hello World&quot;）到操作数栈顶。#3 是一个指向常量池的索引，常量池里存储了字符串&quot;Hello World&quot;的引用。执行这条指令后，字符串&quot;Hello World&quot;的引用会被压入操作数栈顶。</li></ul></li><li><p><code>5: invokevirtual #4 &lt;java/io/PrintStream.println&gt;</code></p><ul><li>操作码：invokevirtual</li><li>操作数：#4</li><li>描述：这条指令的作用是调用实例方法。这里调用的是<code>PrintStream</code>类的<code>println</code>方法，用来打印字符串。#4 是一个指向常量池的索引，常量池里存储了<code>java/io/PrintStream.println</code>方法的引用信息。需要注意的是，调用实例方法前，需要将对象引用和方法参数压入操作数栈。在这个例子中，<code>System.out</code>的引用和字符串&quot;Hello World&quot;已经被压入栈中，所以可以直接调用<code>println</code>方法。</li></ul></li><li><p><code>8: return</code></p><ul><li>操作码：return</li><li>描述：这条指令的作用是从当前方法返回。因为这是一个<code>void</code>方法，所以不需要从操作数栈中弹出返回值。</li></ul></li></ol>`,4),X={href:"https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%82%A8",target:"_blank",rel:"noopener noreferrer"},Z=l(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>b2 00 02 12 03 b6 00 04 b1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：这里是二进制文件的 16 进制表示，也就是 hex，一般分析二进制文件都是以 hex 进行分析。</p></blockquote><p>我们可以看一下字节码指令和二进制之间的对应关系，以及对应的语义。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>0xb2   getstatic       获取静态字段的值
0x12   ldc             常量池中的常量值入栈
0xb6   invokevirtual   运行时方法绑定调用方法
0xb1   return          void 方法返回
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),z=n("p",null,[n("img",{src:f,alt:"Alt text"})],-1),G=n("p",null,"在解释执行模式下，JVM 直接解释执行字节码。这意味着每一条 Java 字节码指令都由解释器直接转换成对应的机器指令并立即执行。这个过程不涉及编译优化，因此执行速度相对较慢。",-1),Q=n("p",null,"JIT 编译器会在运行时将热点代码编译成机器码，这样就可以在后面的执行过程中直接使用编译好的机器码，而不需要再次解释执行。这样就可以提高程序的执行效率。",-1),Y=n("p",null,[n("img",{src:x,alt:"Alt text"})],-1),$=n("p",null,"其中程序计数器、虚拟机栈以及本地方法栈属于线程私有的，堆以及元数据区属于共享数据区，不同的线程共享这两部分内存数据。",-1),nn=l('<p>但是如果当前虚拟机中的线程执行的是 [naive 方法](../ooined。</p><p>当线程执行字节码指令时，程序计数器会进行自动加 1 指向下一条字节码指令地址。</p><p>如果遇到判断分支、循环以及异常等不同的控制转移语句，程序计数器会被置为目标字节码指令的地址。另外在多线程切换的时候，虚拟机会记录当前线程的程序计数器，当线程切换回来的时候会根据此前记录的值恢复到程序计数器中，来继续执行线程的后续的字节码指令。</p><p>除了程序计数器之外，字节码指令的执行流转还需要虚拟机栈的参与。我们先来看下虚拟机栈的大致结构，如下图所示。</p><p><img src="'+y+`" alt="Alt text"></p><p>栈大家肯定都知道，它是一个先入后出的数据结构，非常适合配合方法的执行过程。虚拟机栈操作的基本元素就是栈帧，栈帧的结构主要包含了局部变量、操作数栈、动态连接以及方法返回地址这几个部分。</p><p>知道了虚拟机栈的结构之后，我们来看下方法执行的流转过程是怎样的，我们以这段代码为例，一个 Test 类，main 方法里 new 了一个 Uesr 对象，会将 User 的 age 作为参数传递给静态方法 calculate 进行一个简单的加法操作并返回，最后打印到控制台。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> result <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> data <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、JVM 启动完成 .class 文件加载之后，它会创建一个名为&quot;main&quot;的线程，并且该线程会自动调用定义在该类中的名为&quot;main&quot;的静态方法，这也是 Java 程序的入口点；</p><p>2、当 JVM 在主线程中调用当前方法的时候就会创建当前线程独享的程序计数器以及虚拟机栈，在 Test.class 类中，开始执行 mian 方法时，JVM 会在虚拟机栈中压入 main 方法对应的帧栈帧；</p><p><img src="`+w+'" alt="Alt text"></p><p>3、在栈帧的操作数栈中存储了操作的数据，JVM 执行字节码指令的时候从操作数栈中获取数据，执行计算操作之后再将结果压入操作数栈；</p><p>4、当进行 calculate 方法调用的时候，虚拟机栈继续压入 calculate 方法对应的栈帧，被调用方法的参数、局部变量和操作数栈等信息会存储在新创建的栈帧中。其中该栈帧中的方法返回地址中存放了 main 方法执行的地址信息，方便在调用方法执行完成后继续恢复调用前的代码执行；</p><p><img src="'+A+'" alt="Alt text"></p><p>5、对于 age + 3 这条加法指令，在执行该指令之前，JVM 会将操作数栈顶部的两个元素弹出，并将它们相加，然后将结果推入操作数栈中。在这个例子中，指令的操作码是“add”，它表示执行加法操作；操作数是 0，它表示从操作数栈的顶部获取第一个操作数；操作数是 1，它表示从操作数栈的次顶部获取第二个操作数；</p><p>6、程序计数器中存储了下一条需要执行操作的字节码指令的地址，因此 Java 线程执行业务逻辑的时候必须借助于程序计数器才能获得下一步命令的地址；</p><p>7、当 calculate 方法执行完成之后，对应的栈帧将从虚拟机栈中弹出，其中方法执行的结果会被压入 main 方法对应的栈帧中的操作数栈中，而方法返回地址被重置到 main 线程对应的程序计数器中，以便于后续字节码执行引擎从程序计数器中获取下一条命令的地址。如果方法没有返回值，JVM 仍然会将一个 null 值推送到调用该方法的栈帧的操作数栈中，作为占位符，以便恢复调用方的操作数栈状态。</p><p>8、字节码执行引擎中的解释器会从程序计数器中获取下一个字节码指令的地址，也就是从元空间中获取对应的字节码指令，在获取到指令之后，通过翻译器翻译为对应的汇编语言而再交给硬件解析为机器指令，最终由 CPU 进行执行，而后再将执行结果进行写回。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Java 代码首先被编译器转换为字节码，然后在 JVM 上运行。在运行时，JVM 通过解释执行或即时编译（JIT）将字节码转换为机器码。解释执行直接运行字节码，而 JIT 在运行时将热点代码编译优化为机器码以提升性能。</p>',20),an={href:"https://mp.weixin.qq.com/s/pj3Y-O2eIRF5tQmHboGN3A",target:"_blank",rel:"noopener noreferrer"},sn=n("hr",null,null,-1),en=n("p",null,".",-1);function tn(ln,on){const e=o("RouteLink"),i=o("ExternalLinkIcon");return p(),d("div",null,[V,n("p",null,[a("“二哥，看了 "),s(e,{to:"/docs/java/overview/hello-world.html"},{default:t(()=>[a("Hello World")]),_:1}),a(" 的代码后，我很好奇，它是怎么在 Intellij IDEA 的 Run 面板里打印出‘三妹，少看手机少打游戏，好好学，美美哒’呢？”三妹咪了一口麦香可可奶茶后对我说。")]),S,n("p",null,[a("IDEA 默认会用 "),n("a",E,[a("Fernflower"),s(i)]),a(" 这个反编译工具将字节码文件（后缀为 .class 的文件，也就是 Java 源代码编译后的文件）反编译为我们可以看得懂的 Java 源代码。")]),I,n("p",null,[a("bytecode 是不是就有点看不懂了？新手看到这个很容易头大，不过不要担心，后面我再和大家一块深入研究，这里就是让大家提前感受一下"),s(e,{to:"/docs/java/jvm/class-file-jiegou.html"},{default:t(()=>[a("bytecode")]),_:1}),a("的无穷魅力。")]),M,q,C,D,n("p",null,[a("字节码并不是机器码，操作系统无法直接识别，需要在操作系统上安装不同版本的 "),s(e,{to:"/docs/java/jvm/what-is-jvm.html"},{default:t(()=>[a("JVM")]),_:1}),a(" 来识别。通常情况下，我们只需要安装不同版本的 JDK（Java Development Kit，Java 开发工具包）就行了，它里面包含了 JRE（Java Runtime Environment，Java 运行时环境），而 JRE 又包含了 JVM。")]),T,n("p",null,[a("使用 jclasslib 不仅可以直观地查看类对应的字节码，还可以查看类的基本信息、常量池、接口、字段、方法等信息，如下图所示，"),s(e,{to:"/docs/java/jvm/class-file-jiegou.html"},{default:t(()=>[a("后面也会细讲")]),_:1}),a("。")]),R,W,H,n("p",null,[a("字节码文件如果用十六进制编辑器（"),s(e,{to:"/docs/java/jvm/class-load.html"},{default:t(()=>[a("下一节")]),_:1}),a("会讲到）打开的话，内容如下所示。")]),P,B,O,n("p",null,[a("当有了 .class 文件也就是"),s(e,{to:"/docs/java/jvm/class-file-jiegou.html"},{default:t(()=>[a("字节码文件")]),_:1}),a("之后，就需要启动一个 JVM 实例来进一步加载解析并运行 .class 文件中的字节码。")]),n("p",null,[a("JVM 本质上是操作系统中的一个进程，因此要想通过 JVM 加载解析字节码文件，就必须先启动一个 JVM 进程。JVM 进程启动之后通过"),s(e,{to:"/docs/java/jvm/class-load.html"},{default:t(()=>[a("类加载器（下一节会细讲）")]),_:1}),a("加载字节码文件，然后将字节码加载到 JVM 对应的内存空间，再转化为机器码最终交给 CPU 执行。")]),N,U,F,n("p",null,[a("下面使用 "),s(e,{to:"/docs/java/jvm/bytecode.html"},{default:t(()=>[a("javap")]),_:1}),a("（后面会细讲）来稍微看一下 HelloWorld 程序的字节码。")]),K,n("p",null,[a("上面的 getstatic、ldc、invokevirtual、return 等就是 "),s(e,{to:"/docs/java/jvm/zijiema-zhiling.html"},{default:t(()=>[a("字节码指令")]),_:1}),a("，后面会细讲，这里就先简单了解下。")]),n("p",null,[a("大家可以使用 "),n("a",X,[a("hexdump"),s(i)]),a("（一个在 Unix 和 Linux 系统中常用的工具，用于以十六进制的形式显示文件的内容）看一下字节码的二进制内容。与以上字节码对应的二进制，就是下面这几个数字：")]),Z,n("p",null,[a("JVM 就是靠解析这些操作码和操作数来完成程序执行的。常见的执行方式有两种，一种解释执行，将操作码和操作数翻译成机器码执行；另外一种就是 "),s(e,{to:"/docs/java/jvm/jit.html"},{default:t(()=>[a("JIT（后面会细讲）")]),_:1}),a("，也就是我们常说的即时编译，它会在一定条件下将字节码编译成机器码之后再执行。")]),z,G,Q,n("p",null,[a("注意，当"),s(e,{to:"/docs/java/jvm/class-load.html"},{default:t(()=>[a("类加载器完成字节码数据加载")]),_:1}),a("任务之后，JVM 划分了专门的内存区域承载这些字节码数据以及运行时中间数据。")]),Y,$,n("p",null,[a("如果当前虚拟机中的线程执行的是 Java 的"),s(e,{to:"/docs/java/oo/method.html"},{default:t(()=>[a("普通方法")]),_:1}),a("，那么此时程序计数器中起初存储的是方法的第一条指令，当方法开始执行之后，PC 寄存器存储的是下一个字节码指令的地址。")]),nn,n("p",null,[a("其中字节码是非常关键的内容，涉及到"),s(e,{to:"/docs/java/jvm/class-load.html"},{default:t(()=>[a("类的加载机制")]),_:1}),a("、字节码文件的结构、字节码指令的执行流程等等，后面我们会细讲。")]),n("blockquote",null,[n("p",null,[a("参考链接："),n("a",an,[a("JVM 是如何运行 Java 程序的"),s(i)]),a("，作者梦尧技术，写的很不错。")])]),sn,en])}const pn=c(L,[["render",tn],["__file","Javadaimayunxingliucheng.html.vue"]]),dn=JSON.parse('{"path":"/docs/java/jvm/Javadaimayunxingliucheng.html","title":"Java代码运行流程","lang":"en-US","frontmatter":{"title":"Java代码运行流程","shortTitle":"JVM如何运行Java代码？","category":["Java核心"],"tag":["Java虚拟机"],"description":"Java代码首先被编译器转换为字节码，然后在JVM上运行。在运行时，JVM通过解释执行或即时编译（JIT）将字节码转换为机器码。解释执行直接运行字节码，而JIT在运行时将热点代码编译优化为机器码以提升性能。","head":[["meta",{"name":"keywords","content":"Java,JavaSE,教程,二哥的Java进阶之路,jvm,Java虚拟机"}]]},"headers":[{"level":2,"title":"编译期","slug":"编译期","link":"#编译期","children":[{"level":3,"title":"jclasslib","slug":"jclasslib","link":"#jclasslib","children":[]}]},{"level":2,"title":"运行时","slug":"运行时","link":"#运行时","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1715269884000,"updatedTime":1715269884000,"contributors":[{"name":"dong","email":"dwx_job@163.com","commits":1}]},"filePathRelative":"docs/java/jvm/Java代码运行流程.md"}');export{pn as comp,dn as data};
