import{_ as e,o as a,c as t,e as r}from"./app-BihAYnmf.js";const s={},c=r('<h3 id="字节与字符" tabindex="-1"><a class="header-anchor" href="#字节与字符"><span>字节与字符</span></a></h3><p>Bit最小的二进制单位 ，是计算机的操作部分。取值0或者1</p><p>Byte（字节）是计算机操作数据的最小单位由8位bit组成 取值（-128-127）</p><p>Char（字符）是用户的可读写的最小单位，在Java里面由16位bit组成 取值（0-65535）</p><h3 id="字节流" tabindex="-1"><a class="header-anchor" href="#字节流"><span>字节流</span></a></h3><p>操作byte类型数据，主要操作类是OutputStream、InputStream的子类；不用缓冲区，直接对文件本身操作。</p><h3 id="字符流" tabindex="-1"><a class="header-anchor" href="#字符流"><span>字符流</span></a></h3><p>操作字符类型数据，主要操作类是Reader、Writer的子类；使用缓冲区缓冲字符，不关闭流就不会输出任何内容。</p><h3 id="互相转换" tabindex="-1"><a class="header-anchor" href="#互相转换"><span>互相转换</span></a></h3><p>整个IO包实际上分为字节流和字符流，但是除了这两个流之外，还存在一组字节流-字符流的转换类。</p><p>OutputStreamWriter：是Writer的子类，将输出的字符流变为字节流，即将一个字符流的输出对象变为字节流输出对象。</p><p>InputStreamReader：是Reader的子类，将输入的字节流变为字符流，即将一个字节流的输入对象变为字符流的输入对象。</p>',12),n=[c];function i(l,h){return a(),t("div",null,n)}const d=e(s,[["render",i],["__file","byte-stream-vs-character-stream.html.vue"]]),o=JSON.parse('{"path":"/docs/java/java-basic/byte-stream-vs-character-stream.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"字节与字符","slug":"字节与字符","link":"#字节与字符","children":[]},{"level":3,"title":"字节流","slug":"字节流","link":"#字节流","children":[]},{"level":3,"title":"字符流","slug":"字符流","link":"#字符流","children":[]},{"level":3,"title":"互相转换","slug":"互相转换","link":"#互相转换","children":[]}],"git":{"createdTime":1715384499000,"updatedTime":1715384499000,"contributors":[{"name":"dong","email":"dwx_job@163.com","commits":1}]},"filePathRelative":"docs/java/java-basic/byte-stream-vs-character-stream.md"}');export{d as comp,o as data};
