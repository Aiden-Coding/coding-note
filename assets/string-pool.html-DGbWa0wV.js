import{_ as t,o as e,c as o,e as a}from"./app-BihAYnmf.js";const n={},s=a(`<p>字符串大家一定都不陌生，他是我们非常常用的一个类。</p><p>String作为一个Java类，可以通过以下两种方式创建一个字符串：</p><pre><code>String str = &quot;Hollis&quot;;

String str = new String(&quot;Hollis&quot;)；
</code></pre><p>而第一种是我们比较常用的做法，这种形式叫做&quot;字面量&quot;。</p><p>在JVM中，为了减少相同的字符串的重复创建，为了达到节省内存的目的。会单独开辟一块内存，用于保存字符串常量，这个内存区域被叫做字符串常量池。</p><p>当代码中出现双引号形式（字面量）创建字符串对象时，JVM 会先对这个字符串进行检查，如果字符串常量池中存在相同内容的字符串对象的引用，则将这个引用返回；否则，创建新的字符串对象，然后将这个引用放入字符串常量池，并返回该引用。</p><p>这种机制，就是字符串驻留或池化。</p><h3 id="字符串常量池的位置" tabindex="-1"><a class="header-anchor" href="#字符串常量池的位置"><span>字符串常量池的位置</span></a></h3><p>在JDK 7以前的版本中，字符串常量池是放在永久代中的。</p><p>因为按照计划，JDK会在后续的版本中通过元空间来代替永久代，所以首先在JDK 7中，将字符串常量池先从永久代中移出，暂时放到了堆内存中。</p><p>在JDK 8中，彻底移除了永久代，使用元空间替代了永久代，于是字符串常量池再次从堆内存移动到永久代中</p>`,11),r=[s];function i(p,c){return e(),o("div",null,r)}const d=t(n,[["render",i],["__file","string-pool.html.vue"]]),m=JSON.parse('{"path":"/docs/java/java-basic/string-pool.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"字符串常量池的位置","slug":"字符串常量池的位置","link":"#字符串常量池的位置","children":[]}],"git":{"createdTime":1715384499000,"updatedTime":1715384499000,"contributors":[{"name":"dong","email":"dwx_job@163.com","commits":1}]},"filePathRelative":"docs/java/java-basic/string-pool.md"}');export{d as comp,m as data};
