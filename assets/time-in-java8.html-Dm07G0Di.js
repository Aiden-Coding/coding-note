import{_ as a,o as e,c as t,e as o}from"./app-BihAYnmf.js";const l={},c=o(`<p>Java 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。</p><p>在旧版的 Java 中，日期时间 API 存在诸多问题，其中有：</p><ul><li><p>非线程安全 − java.util.Date 是非线程安全的，所有的日期类都是可变的，这是Java日期类最大的问题之一。</p></li><li><p>设计很差 − Java的日期/时间类的定义并不一致，在java.util和java.sql的包中都有日期类，此外用于格式化和解析的类在java.text包中定义。java.util.Date同时包含日期和时间，而java.sql.Date仅包含日期，将其纳入java.sql包并不合理。另外这两个类都有相同的名字，这本身就是一个非常糟糕的设计。</p></li><li><p>时区处理麻烦 − 日期类并不提供国际化，没有时区支持，因此Java引入了java.util.Calendar和java.util.TimeZone类，但他们同样存在上述所有的问题。</p></li></ul><p>在Java8中， 新的时间及⽇期API位于java.time包中， 该包中有哪些重要的类。 分别代表了什么？</p><p><code>Instant</code>： 时间戳</p><p><code>Duration</code>： 持续时间， 时间差</p><p><code>LocalDate</code>： 只包含⽇期， ⽐如： 2016-10-20</p><p><code>LocalTime</code>： 只包含时间， ⽐如： 23:12:10</p><p><code>LocalDateTime</code>： 包含⽇期和时间， ⽐如： 2016-10-20 23:14:21</p><p><code>Period</code>： 时间段</p><p><code>ZoneOffset</code>： 时区偏移量， ⽐如： +8:00</p><p><code>ZonedDateTime</code>： 带时区的时间</p><p><code>Clock</code>： 时钟， ⽐如获取⽬前美国纽约的时间</p><p>新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。</p><h3 id="localtime-和-localdate的区别" tabindex="-1"><a class="header-anchor" href="#localtime-和-localdate的区别"><span>LocalTime 和 LocalDate的区别？</span></a></h3><p><code>LocalDate</code>表⽰⽇期， 年⽉⽇， <code>LocalTime</code>表⽰时间， 时分 秒</p><h3 id="获取当前时间" tabindex="-1"><a class="header-anchor" href="#获取当前时间"><span>获取当前时间</span></a></h3><p>在Java8中，使用如下方式获取当前时间：</p><pre><code>LocalDate today = LocalDate.now();
int year = today.getYear();
int month = today.getMonthValue();
int day = today.getDayOfMonth();
System.out.printf(&quot;Year : %d Month : %d day : %d t %n&quot;, year,month, day);
</code></pre><h3 id="创建指定日期的时间" tabindex="-1"><a class="header-anchor" href="#创建指定日期的时间"><span>创建指定日期的时间</span></a></h3><pre><code>LocalDate date = LocalDate.of(2018, 01, 01);
</code></pre><h3 id="检查闰年" tabindex="-1"><a class="header-anchor" href="#检查闰年"><span>检查闰年</span></a></h3><p>直接使⽤LocalDate的isLeapYear即可判断是否闰年</p><pre><code>LocalDate nowDate = LocalDate.now();
//判断闰年
boolean leapYear = nowDate.isLeapYear();
</code></pre><h3 id="计算两个日期之间的天数和月数" tabindex="-1"><a class="header-anchor" href="#计算两个日期之间的天数和月数"><span>计算两个⽇期之间的天数和⽉数</span></a></h3><p>在Java 8中可以⽤java.time.Period类来做计算。</p><pre><code>Period period = Period.between(LocalDate.of(2018, 1, 5),LocalDate.of(2018, 2, 5));
</code></pre>`,27),i=[c];function n(d,p){return e(),t("div",null,i)}const s=a(l,[["render",n],["__file","time-in-java8.html.vue"]]),h=JSON.parse('{"path":"/docs/java/java-basic/time-in-java8.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"LocalTime 和 LocalDate的区别？","slug":"localtime-和-localdate的区别","link":"#localtime-和-localdate的区别","children":[]},{"level":3,"title":"获取当前时间","slug":"获取当前时间","link":"#获取当前时间","children":[]},{"level":3,"title":"创建指定日期的时间","slug":"创建指定日期的时间","link":"#创建指定日期的时间","children":[]},{"level":3,"title":"检查闰年","slug":"检查闰年","link":"#检查闰年","children":[]},{"level":3,"title":"计算两个⽇期之间的天数和⽉数","slug":"计算两个日期之间的天数和月数","link":"#计算两个日期之间的天数和月数","children":[]}],"git":{"createdTime":1715384499000,"updatedTime":1715384499000,"contributors":[{"name":"dong","email":"dwx_job@163.com","commits":1}]},"filePathRelative":"docs/java/java-basic/time-in-java8.md"}');export{s as comp,h as data};
