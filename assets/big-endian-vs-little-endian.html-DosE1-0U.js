import{_ as t,o as e,c as a,a as n}from"./app-BihAYnmf.js";const i={},s=n("p",null,"字节序，也就是字节的顺序，指的是多字节的数据在内存中的存放顺序。",-1),l=n("p",null,"在几乎所有的机器上，多字节对象都被存储为连续的字节序列。例如：如果C/C++中的一个int型变量 a 的起始地址是&a = 0x100，那么 a 的四个字节将被存储在存储器的0x100, 0x101, 0x102, 0x103位置。",-1),o=n("p",null,"根据整数 a 在连续的 4 byte 内存中的存储顺序，字节序被分为大端序（Big Endian） 与 小端序（Little Endian）两类。",-1),d=n("p",null,"Big Endian 是指低地址端 存放 高位字节。 Little Endian 是指低地址端 存放 低位字节。",-1),c=n("p",null,"比如数字0x12345678在两种不同字节序CPU中的存储顺序：",-1),_=n("p",null,"Big Endian：12345678 Little Endian ： 78563412",-1),r=n("p",null,"Java采用Big Endian来存储数据、C\\C++采用Little Endian。在网络传输一般采用的网络字节序是BIG-ENDIAN。和Java是一致的。",-1),m=n("p",null,"所以在用C/C++写通信程序时，在发送数据前务必把整型和短整型的数据进行从主机字节序到网络字节序的转换，而接收数据后对于整型和短整型数据则必须实现从网络字节序到主机字节序的转换。如果通信的一方是JAVA程序、一方是C/C++程序时，则需要在C/C++一侧使用以上几个方法进行字节序的转换，而JAVA一侧，则不需要做任何处理，因为JAVA字节序与网络字节序都是BIG-ENDIAN，只要C/C++一侧能正确进行转换即可（发送前从主机序到网络序，接收时反变换）。如果通信的双方都是JAVA，则根本不用考虑字节序的问题了。",-1),h=[s,l,o,d,c,_,r,m];function p(u,C){return e(),a("div",null,h)}const v=t(i,[["render",p],["__file","big-endian-vs-little-endian.html.vue"]]),g=JSON.parse('{"path":"/docs/java/java-basic/big-endian-vs-little-endian.html","title":"","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":1715384499000,"updatedTime":1715384499000,"contributors":[{"name":"dong","email":"dwx_job@163.com","commits":1}]},"filePathRelative":"docs/java/java-basic/big-endian-vs-little-endian.md"}');export{v as comp,g as data};
