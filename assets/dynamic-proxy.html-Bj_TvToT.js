import{_ as o,r as c,o as n,c as s,a as e,b as t,d as i,w as r}from"./app-BihAYnmf.js";const d={},l=e("p",null,"有没有一种方法，可以不需要程序员自己手写代理类呢。这就是动态代理啦。",-1),m=e("p",null,"动态代理中的代理类并不要求在编译期就确定，而是可以在运行期动态生成，从而实现对目标对象的代理功能。",-1),_=e("p",null,"反射是动态代理的一种实现方式。",-1);function p(u,h){const a=c("RouteLink");return n(),s("div",null,[e("p",null,[t("前面介绍了"),i(a,{to:"/basics/java-basic/static-proxy.html"},{default:r(()=>[t("静态代理")]),_:1}),t("，虽然静态代理模式很好用，但是静态代理还是存在一些局限性的，比如使用静态代理模式需要程序员手写很多代码，这个过程是比较浪费时间和精力的。一旦需要代理的类中方法比较多，或者需要同时代理多个对象的时候，这无疑会增加很大的复杂度。")]),l,m,_])}const f=o(d,[["render",p],["__file","dynamic-proxy.html.vue"]]),v=JSON.parse('{"path":"/docs/java/java-basic/dynamic-proxy.html","title":"","lang":"en-US","frontmatter":{},"headers":[],"git":{"createdTime":1715384499000,"updatedTime":1715384499000,"contributors":[{"name":"dong","email":"dwx_job@163.com","commits":1}]},"filePathRelative":"docs/java/java-basic/dynamic-proxy.md"}');export{f as comp,v as data};
