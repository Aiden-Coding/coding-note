import{_ as s,r as l,o,c as t,a as n,b as a,d as i,e as r}from"./app-BihAYnmf.js";const c={},p={href:"https://www.hollischuang.com/archives/2322",target:"_blank",rel:"noopener noreferrer"},d=r(`<p>有了字节码，无论是哪种平台（如Windows、Linux等），只要安装了虚拟机，都可以直接运行字节码。</p><p>同样，有了字节码，也解除了Java虚拟机和Java语言之间的耦合。这话可能很多人不理解，Java虚拟机不就是运行Java语言的么？这种解耦指的是什么？</p><p>其实，目前Java虚拟机已经可以支持很多除Java语言以外的语言了，如Kotlin、Groovy、JRuby、Jython、Scala等。之所以可以支持，就是因为这些语言也可以被编译成字节码。而虚拟机并不关心字节码是有哪种语言编译而来的。</p><p>经常使用IDE的开发者可能会发现，当我们在Intelij IDEA中，鼠标右键想要创建Java类的时候，IDE还会提示创建其他类型的文件，这就是IDE默认支持的一些可以运行在JVM上面的语言，没有提示的，可以通过插件来支持。</p><img src="https://www.hollischuang.com/wp-content/uploads/2018/11/languages.png"><p>目前，可以直接在JVM上运行的语言有很多，今天介绍其中比较重要的九种。每种语言通过一段『HelloWorld』代码进行演示，看看不同语言的语法有何不同。</p><h3 id="kotlin" tabindex="-1"><a class="header-anchor" href="#kotlin"><span>Kotlin</span></a></h3><p>Kotlin是一种在Java虚拟机上运行的静态类型编程语言，它也可以被编译成为JavaScript源代码。Kotlin的设计初衷就是用来生产高性能要求的程序的，所以运行起来和Java也是不相上下。Kotlin可以从 JetBrains InteilliJ Idea IDE这个开发工具以插件形式使用。</p><h4 id="hello-world-in-kotlin" tabindex="-1"><a class="header-anchor" href="#hello-world-in-kotlin"><span>Hello World In Kotlin</span></a></h4><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="groovy" tabindex="-1"><a class="header-anchor" href="#groovy"><span>Groovy</span></a></h3><p>Apache的Groovy是Java平台上设计的面向对象编程语言。它的语法风格与Java很像，Java程序员能够很快的熟练使用 Groovy，实际上，Groovy编译器是可以接受完全纯粹的Java语法格式的。</p><p>使用Groovy的一个重要特点就是使用类型推断，即能够让编译器能够在程序员没有明确说明的时候推断出变量的类型。Groovy可以使用其他Java语言编写的库。Groovy的语法与Java非常相似，大多数Java代码也匹配Groovy的语法规则，尽管可能语义不同。</p><h4 id="hello-world-in-groovy" tabindex="-1"><a class="header-anchor" href="#hello-world-in-groovy"><span>Hello World In Groovy</span></a></h4><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scala" tabindex="-1"><a class="header-anchor" href="#scala"><span>Scala</span></a></h3><p>Scala是一门多范式的编程语言，设计初衷是要集成面向对象编程和函数式编程的各种特性。</p><p>Scala经常被我们描述为多模式的编程语言，因为它混合了来自很多编程语言的元素的特征。但无论如何它本质上还是一个纯粹的面向对象语言。它相比传统编 程语言最大的优势就是提供了很好并行编程基础框架措施了。Scala代码能很好的被优化成字节码，运行起来和原生Java一样快。</p><h4 id="hello-world-in-scala" tabindex="-1"><a class="header-anchor" href="#hello-world-in-scala"><span>Hello World In Scala</span></a></h4><div class="language-scala line-numbers-mode" data-ext="scala" data-title="scala"><pre class="language-scala"><code><span class="token keyword">object</span> HelloWorld <span class="token punctuation">{</span>
    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jruby" tabindex="-1"><a class="header-anchor" href="#jruby"><span>Jruby</span></a></h3><p>JRuby是用来桥接Java与Ruby的，它是使用比Groovy更加简短的语法来编写代码，能够让每行代码执行更多的任务。就和Ruby一样，JRuby不仅仅只提供了高级的语法格式。它同样提供了纯粹的面向对象的实现，闭包等等，而且JRuby跟Ruby自身相比多了很多基于Java类库 可以调用，虽然Ruby也有很多类库，但是在数量以及广泛性上是无法跟Java标准类库相比的。</p><h4 id="hello-world-in-jruby" tabindex="-1"><a class="header-anchor" href="#hello-world-in-jruby"><span>Hello World In Jruby</span></a></h4><div class="language-ruby line-numbers-mode" data-ext="rb" data-title="rb"><pre class="language-ruby"><code>puts <span class="token string-literal"><span class="token string">&#39;Hello, world!&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="jython" tabindex="-1"><a class="header-anchor" href="#jython"><span>Jython</span></a></h3><p>Jython，是一个用Java语言写的Python解释器。Jython能够用Python语言来高效生成动态编译的Java字节码。</p><h4 id="hello-world-in-jython" tabindex="-1"><a class="header-anchor" href="#hello-world-in-jython"><span>Hello World In Jython</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span> <span class="token string">&quot;Hello, world!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fantom" tabindex="-1"><a class="header-anchor" href="#fantom"><span>Fantom</span></a></h3><p>Fantom是一种通用的面向对象编程语言，由Brian和Andy Frank创建，运行在Java Runtime Environment，JavaScript和.NET Common Language Runtime上。其主要设计目标是提供标准库API，以抽象出代码是否最终将在JRE或CLR上运行的问题。</p><p>Fantom是与Groovy以及JRuby差不多的一样面向对 象的编程语言，但是悲剧的是Fantom无法使用Java类库，而是使用它自己扩展的类库。</p><h4 id="hello-world-in-fantom" tabindex="-1"><a class="header-anchor" href="#hello-world-in-fantom"><span>Hello World In Fantom</span></a></h4><div class="language-fantom line-numbers-mode" data-ext="fantom" data-title="fantom"><pre class="language-fantom"><code>class Hello {
    static Void main() { echo(&quot;Hello, world!&quot;) }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clojure" tabindex="-1"><a class="header-anchor" href="#clojure"><span>Clojure</span></a></h3><p>Clojure是Lisp编程语言在Java平台上的现代、函数式及动态方言。 与其他Lisp一样，Clojure视代码为数据且拥有一套Lisp宏系统。</p><p>虽然Clojure也能被直接编译成Java字节码，但是无法使用动态语言特性以及直 接调用Java类库。与其他的JVM脚本语言不一样，Clojure并不算是面向对象的。</p><h4 id="hello-world-in-clojure" tabindex="-1"><a class="header-anchor" href="#hello-world-in-clojure"><span>Hello World In Clojure</span></a></h4><div class="language-clojure line-numbers-mode" data-ext="clojure" data-title="clojure"><pre class="language-clojure"><code><span class="token punctuation">(</span><span class="token keyword">defn</span> -main <span class="token punctuation">[</span>&amp; args<span class="token punctuation">]</span>
    <span class="token punctuation">(</span><span class="token keyword">println</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rhino" tabindex="-1"><a class="header-anchor" href="#rhino"><span>Rhino</span></a></h3><p>Rhino是一个完全以Java编写的JavaScript引擎，目前由Mozilla基金会所管理。</p><p>Rhino的特点是为JavaScript加了个壳，然后嵌入到Java中，这样能够让Java程序员直接使用。其中Rhino的JavaAdapters能够让JavaScript通过调用Java的类来实现特定的功能。</p><h4 id="hello-world-in-rhino" tabindex="-1"><a class="header-anchor" href="#hello-world-in-rhino"><span>Hello World In Rhino</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ceylon" tabindex="-1"><a class="header-anchor" href="#ceylon"><span>Ceylon</span></a></h3><p>Ceylon是一种面向对象，强烈静态类型的编程语言，强调不变性，由Red Hat创建。 Ceylon程序在Java虚拟机上运行，​​可以编译为JavaScript。 语言设计侧重于源代码可读性，可预测性，可扩展性，模块性和元编程性。</p><h4 id="hello-world-in-ceylon" tabindex="-1"><a class="header-anchor" href="#hello-world-in-ceylon"><span>Hello World In Ceylon</span></a></h4><div class="language-ceylon line-numbers-mode" data-ext="ceylon" data-title="ceylon"><pre class="language-ceylon"><code>shared void run() {
    print(&quot;Hello, world!&quot;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>好啦，以上就是目前主流的可以在JVM上面运行的9种语言。加上Java正好10种。如果你是一个Java开发，那么有必要掌握以上9中的一种，这样可以在一些有特殊需求的场景中有更多的选择。推荐在Groovy、Scala、Kotlin中选一个。</p>`,49);function u(h,v){const e=l("ExternalLinkIcon");return o(),t("div",null,[n("p",null,[a("我们在《"),n("a",p,[a("深入分析Java的编译原理"),i(e)]),a("》中提到过，为了让Java语言具有良好的跨平台能力，Java独具匠心的提供了一种可以在所有平台上都能使用的一种中间代码——字节码（ByteCode）。")]),d])}const k=s(c,[["render",u],["__file","jvm-language.html.vue"]]),g=JSON.parse('{"path":"/docs/java/object-oriented/jvm-language.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Kotlin","slug":"kotlin","link":"#kotlin","children":[]},{"level":3,"title":"Groovy","slug":"groovy","link":"#groovy","children":[]},{"level":3,"title":"Scala","slug":"scala","link":"#scala","children":[]},{"level":3,"title":"Jruby","slug":"jruby","link":"#jruby","children":[]},{"level":3,"title":"Jython","slug":"jython","link":"#jython","children":[]},{"level":3,"title":"Fantom","slug":"fantom","link":"#fantom","children":[]},{"level":3,"title":"Clojure","slug":"clojure","link":"#clojure","children":[]},{"level":3,"title":"Rhino","slug":"rhino","link":"#rhino","children":[]},{"level":3,"title":"Ceylon","slug":"ceylon","link":"#ceylon","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1715384499000,"updatedTime":1715384499000,"contributors":[{"name":"dong","email":"dwx_job@163.com","commits":1}]},"filePathRelative":"docs/java/object-oriented/jvm-language.md"}');export{k as comp,g as data};
