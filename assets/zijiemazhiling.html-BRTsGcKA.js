import{_ as i,r as l,o as c,c as d,a as s,b as n,d as a,w as t,e as p}from"./app-BihAYnmf.js";const u="/coding-note/assets/image-311-CXh1VsY3.png",r="/coding-note/assets/image-312-CzGIadK_.png",k="/coding-note/assets/image-313-BEi-0Jz9.png",v="/coding-note/assets/image-314-Bz7O6qEa.png",m="/coding-note/assets/image-315-cshjrvSz.png",b="/coding-note/assets/image-316-enrmz07x.png",g="/coding-note/assets/image-317-DGab8ky5.png",h="/coding-note/assets/image-318-DXv6sIj4.png",_="/coding-note/assets/image-319-Difrbu-V.png",y="/coding-note/assets/image-320-bgWZ-V-Z.png",w="/coding-note/assets/image-321-BCeqUdy6.png",j="/coding-note/assets/image-322-DmSahQw7.png",x="/coding-note/assets/image-323-BajqZuBW.png",f="/coding-note/assets/image-324-DU925VS5.png",S="/coding-note/assets/image-325-CrISDOAu.png",L="/coding-note/assets/image-326-wJCDqm44.png",q="/coding-note/assets/image-327-2_fKgrSX.png",E="/coding-note/assets/image-328-CQutLPDs.png",A="/coding-note/assets/image-329-Djgf7dkj.png",I="/coding-note/assets/image-310-Dm94SpM1.png",z="/coding-note/assets/image-330-DSo91-un.png",J={},M=s("h1",{id:"第六节-字节码指令详解",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#第六节-字节码指令详解"},[s("span",null,"第六节：字节码指令详解")])],-1),C=s("p",null,"讲良心话，不是我谦虚，一开始学 Java 字节码和 Java 虚拟机方面的知识我也头大！但硬着头皮学了一阵子之后，突然就开窍了，觉得好有意思，尤其是明白了 Java 代码在底层竟然是这样执行的时候，感觉既膨胀又飘飘然，浑身上下散发着自信的光芒！",-1),N=s("strong",null,"什么是字节码指令",-1),V=p('<p>Java 的字节码指令由操作码和操作数组成：</p><ul><li>操作码（Opcode）：一个字节长度（0-255，意味着指令集的操作码总数不可能超过 256 条），代表着某种特定的操作含义。</li><li>操作数（Operands）：零个或者多个，紧跟在操作码之后，代表此操作需要的参数。</li></ul><p>由于 Java 虚拟机是基于栈而不是寄存器的结构，所以大多数字节码指令都只有一个操作码。比如 <code>aload_0</code> 就只有操作码没有操作数，而 <code>invokespecial #1</code> 则由操作码和操作数组成。</p><ul><li>aload_0：将局部变量表中下标为 0 的数据压入操作数栈中</li><li>invokespecial #1：调用成员方法或者构造方法，并传递常量池中下标为 1 的常量</li></ul><p>字节码指令主要有以下几种，分别是：</p><ul><li>加载与存储指令</li><li>算术指令</li><li>类型转换指令</li><li>对象的创建与访问指令</li><li>方法调用和返回指令</li><li>操作数栈管理指令</li><li>控制转移指令</li></ul><p>我们来一一说明下。</p><h2 id="加载与存储指令" tabindex="-1"><a class="header-anchor" href="#加载与存储指令"><span>加载与存储指令</span></a></h2>',8),B=p(`<p>看下面这段代码。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 javap 查看字节码指令（大致）如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public int add(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: iadd
       3: istore_3
       4: ireturn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我用下面一幅图来给大家说明白字节码指令的执行过程：</p><p><img src="`+u+'" alt="Alt text"></p><p>然后我们再来分析 load 和 store 指令的具体含义。</p><h3 id="_1-将局部变量表中的变量压入操作数栈中" tabindex="-1"><a class="header-anchor" href="#_1-将局部变量表中的变量压入操作数栈中"><span>1）将局部变量表中的变量压入操作数栈中</span></a></h3><ul><li><code>xload_&lt;n&gt;</code>（x 为 i、l、f、d、a，n 默认为 0 到 3），表示将第 n 个局部变量压入操作数栈中。</li><li>xload（x 为 i、l、f、d、a），通过指定参数的形式，将局部变量压入操作数栈中，当使用这个指令时，表示局部变量的数量可能超过了 4 个</li></ul><p>解释一下。</p><p>x 为操作码助记符，表明是哪一种数据类型。见下表所示。</p><p><img src="'+r+`" alt="Alt text"></p><p>像 arraylength 指令，就没有操作码助记符，它没有代表数据类型的特殊字符，但操作数只能是一个数组类型的对象。</p><p>大部分的指令都不支持 byte、short 和 char，甚至没有任何指令支持 boolean 类型。编译器会将 byte 和 short 类型的数据带符号扩展（Sign-Extend）为 int 类型，将 boolean 和 char 零位扩展（Zero-Extend）为 int 类型。</p><p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">long</span> birthday<span class="token punctuation">,</span> <span class="token keyword">boolean</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age <span class="token operator">+</span> name <span class="token operator">+</span> birthday <span class="token operator">+</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),O=s("code",null,"load()",-1),D=p('<p><img src="'+k+'" alt="Alt text"></p><ul><li><code>iload_1</code>：将局部变量表中下标为 1 的 int 变量压入操作数栈中。</li><li><code>aload_2</code>：将局部变量表中下标为 2 的引用数据类型变量（此时为 String）压入操作数栈中。</li><li><code>lload_3</code>：将局部变量表中下标为 3 的 long 型变量压入操作数栈中。</li><li>iload 5：将局部变量表中下标为 5 的 int 变量（实际为 boolean）压入操作数栈中。</li></ul><p>通过查看局部变量表就能关联上了。</p><p><img src="'+v+'" alt="Alt text"></p><h3 id="_2-将常量池中的常量压入操作数栈中" tabindex="-1"><a class="header-anchor" href="#_2-将常量池中的常量压入操作数栈中"><span>2）将常量池中的常量压入操作数栈中</span></a></h3><p>根据数据类型和入栈内容的不同，又可以细分为 const 系列、push 系列和 Idc 指令。</p><p><strong>const 系列</strong>，用于特殊的常量入栈，要入栈的常量隐含在指令本身。</p><p><img src="'+m+`" alt="Alt text"></p><p><strong>push 系列</strong>，主要包括 bipush 和 sipush，前者接收 8 位整数作为参数，后者接收 16 位整数。</p><p><strong>Idc 指令</strong>，当 const 和 push 不能满足的时候，万能的 Idc 指令就上场了，它接收一个 8 位的参数，指向常量池中的索引。</p><ul><li><code>Idc_w</code>：接收两个 8 位数，索引范围更大。</li><li>如果参数是 long 或者 double，使用 <code>Idc2_w</code> 指令。</li></ul><p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushConstLdc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 范围 [-1,5]</span>
    <span class="token keyword">int</span> iconst <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 范围 [-128,127]</span>
    <span class="token keyword">int</span> bipush <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>
    <span class="token comment">// 范围 [-32768,32767]</span>
    <span class="token keyword">int</span> sipush<span class="token operator">=</span> <span class="token number">32767</span><span class="token punctuation">;</span>
    <span class="token comment">// 其他 int</span>
    <span class="token keyword">int</span> ldc <span class="token operator">=</span> <span class="token number">32768</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> aconst <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token class-name">IdcString</span> <span class="token operator">=</span> <span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>pushConstLdc()</code> 方法的字节码指令。</p><p><img src="`+b+`" alt="Alt text"></p><ul><li><code>iconst_m1</code>：将 -1 入栈。范围 [-1,5]。</li><li>bipush 127：将 127 入栈。范围 [-128,127]。</li><li>sipush 32767：将 32767 入栈。范围 [-32768,32767]。</li><li><code>ldc #6 &lt;32768&gt;</code>：将常量池中下标为 6 的常量 32768 入栈。</li><li>aconst_null：将 null 入栈。</li><li><code>ldc #7 &lt;沉默王二&gt;</code>：将常量池中下标为 7 的常量“沉默王二”入栈。</li></ul><h3 id="_3-将栈顶的数据出栈并装入局部变量表中" tabindex="-1"><a class="header-anchor" href="#_3-将栈顶的数据出栈并装入局部变量表中"><span>3）将栈顶的数据出栈并装入局部变量表中</span></a></h3><p>主要是用来给局部变量赋值，这类指令主要以 store 的形式存在。</p><ul><li><code>xstore_&lt;n&gt;</code>（x 为 i、l、f、d、a，n 默认为 0 到 3）</li><li>xstore（x 为 i、l、f、d、a）</li></ul><p>明白了 <code>xload_&lt;n&gt;</code> 和 xload，再看 <code>xstore_&lt;n&gt;</code> 和 xstore 就会轻松得多，作用反了一下而已。</p><p>大家来想一个问题，为什么要有 <code>xstore_&lt;n&gt;</code> 和 <code>xload_&lt;n&gt;</code> 呢？它们的作用和 xstore n、xload n 不是一样的吗？</p><p><code>xstore_&lt;n&gt;</code> 和 xstore n 的区别在于，前者相当于只有操作码，占用 1 个字节；后者相当于由操作码和操作数组成，操作码占 1 个字节，操作数占 2 个字节，一共占 3 个字节。</p><p>由于局部变量表中前几个位置总是非常常用，虽然 <code>xstore_&lt;n&gt;</code> 和 <code>xload_&lt;n&gt;</code> 增加了指令数量，但字节码的体积变小了！</p><p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> temp <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>store()</code> 方法的字节码指令。</p><p><img src="`+g+'" alt="Alt text"></p><ul><li><code>istore_3</code>：从操作数中弹出一个整数，并把它赋值给局部变量表中索引为 3 的变量。</li><li>astore 4：从操作数中弹出一个引用数据类型，并把它赋值给局部变量表中索引为 4 的变量。</li></ul><p>通过查看局部变量表就能关联上了。</p><p><img src="'+h+'" alt="Alt text"></p><h2 id="算术指令" tabindex="-1"><a class="header-anchor" href="#算术指令"><span>算术指令</span></a></h2><p>算术指令用于对两个操作数栈上的值进行某种特定运算，并把结果重新压入操作数栈。可以分为两类：整型数据的运算指令和浮点数据的运算指令。</p>',32),F=p(`<p>需要注意的是，<strong>数据运算可能会导致溢出</strong>，比如两个很大的正整数相加，很可能会得到一个负数。但 Java 虚拟机规范中并没有对这种情况给出具体结果，因此程序是不会显式报错的。所以，<strong>大家在开发过程中，如果涉及到较大的数据进行加法、乘法运算的时候，一定要注意</strong>！</p><p>当发生溢出时，将会使用有符号的无穷大 Infinity 来表示；如果某个操作结果没有明确的数学定义的话，将会使用 NaN 值来表示。而且所有使用 NaN 作为操作数的算术操作，结果都会返回 NaN。</p><p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infinityNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> j <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity</span>

    <span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> d2 <span class="token operator">=</span> d1 <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>任何一个非零的数除以浮点数 0（注意不是 int 类型），可以想象结果是无穷大 Infinity 的。</li><li>把这个非零的数换成 0 的时候，结果又不太好定义，就用 NaN 值来表示。</li></ul><p>Java 虚拟机提供了两种<strong>运算模式</strong>：</p><ul><li>向最接近数舍入：在进行浮点数运算时，所有的结果都必须舍入到一个适当的精度，不是特别精确的结果必须舍入为可被表示的最接近的精确值，如果有两种可表示的形式与该值接近，将优先选择最低有效位为零的（类似四舍五入）。</li><li>向零舍入：将浮点数转换为整数时，采用该模式，该模式将在目标数值类型中选择一个最接近但是不大于原值的数字作为最精确的舍入结果（类似取整）。</li></ul><p>我把所有的算术指令列一下：</p><ul><li>加法指令：iadd、ladd、fadd、dadd</li><li>减法指令：isub、lsub、fsub、dsub</li><li>乘法指令：imul、lmul、fmul、dmul</li><li>除法指令：idiv、ldiv、fdiv、ddiv</li><li>求余指令：irem、lrem、frem、drem</li><li>自增指令：iinc</li></ul><p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> add <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sub <span class="token operator">=</span> age <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mul <span class="token operator">=</span> age <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> div <span class="token operator">=</span> age <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rem <span class="token operator">=</span> age <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>
    age<span class="token operator">++</span><span class="token punctuation">;</span>
    age<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>calculate()</code> 方法的字节码指令。</p><p><img src="`+_+'" alt="Alt text"></p><ul><li>iadd，加法</li><li>isub，减法</li><li>imul，乘法</li><li>idiv，除法</li><li>irem，取余</li><li>iinc，自增的时候 +1，自减的时候 -1</li></ul><h2 id="类型转换指令" tabindex="-1"><a class="header-anchor" href="#类型转换指令"><span>类型转换指令</span></a></h2><p>类型转换指令可以分为两种：</p><p>1）宽化，小类型向大类型转换，比如 <code>int–&gt;long–&gt;float–&gt;double</code>，对应的指令有：i2l、i2f、i2d、l2f、l2d、f2d。</p><ul><li>从 int 到 long，或者从 int 到 double，是不会有精度丢失的；</li><li>从 int、long 到 float，或者 long 到 double 时，可能会发生精度丢失；</li><li>从 byte、char 和 short 到 int 的宽化类型转换实际上是隐式发生的，这样可以减少字节码指令，毕竟字节码指令只有 256 个，占一个字节。</li></ul><p>2）窄化，大类型向小类型转换，比如从 int 类型到 byte、short 或者 char，对应的指令有：i2b、i2s、i2c；从 long 到 int，对应的指令有：l2i；从 float 到 int 或者 long，对应的指令有：f2i、f2l；从 double 到 int、long 或者 float，对应的指令有：d2i、d2l、d2f。</p><ul><li>窄化很可能会发生精度丢失，毕竟是不同的数量级；</li><li>但 Java 虚拟机并不会因此抛出运行时异常。</li></ul>',20),Z=p(`<p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> d <span class="token operator">=</span> i<span class="token punctuation">;</span>

    <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">10f</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> ong <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>f<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>updown()</code> 方法的字节码指令。</p><p><img src="`+y+'" alt="Alt text"></p><ul><li>i2d，int 宽化为 double</li><li>f2l， float 窄化为 long</li></ul><h2 id="对象的创建和访问指令" tabindex="-1"><a class="header-anchor" href="#对象的创建和访问指令"><span>对象的创建和访问指令</span></a></h2><p>Java 是一门面向对象的编程语言，那么 Java 虚拟机是如何从字节码层面进行支持的呢？</p><h3 id="_1-创建指令" tabindex="-1"><a class="header-anchor" href="#_1-创建指令"><span>1）创建指令</span></a></h3>',8),W=p(`<ul><li>newarray：创建基本数据类型的数组</li><li>anewarray：创建引用类型的数组</li><li>multianewarray：创建多维数组</li></ul><p>而对象的创建指令只有一个，就是 <code>new</code>，它会接收一个操作数，指向常量池中的一个索引，表示要创建的类型。</p><p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">newObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;沉默王二&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;无愁河的浪荡汉子.book&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> ages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>newObject()</code> 方法的字节码指令。</p><p><img src="`+w+'" alt="Alt text"></p><ul><li><code>new #13 &lt;java/lang/String&gt;</code>，创建一个 String 对象。</li><li><code>new #15 &lt;java/io/File&gt;</code>，创建一个 File 对象。</li><li><code>newarray 10 (int)</code>，创建一个 int 类型的数组。</li></ul><h3 id="_2-字段访问指令" tabindex="-1"><a class="header-anchor" href="#_2-字段访问指令"><span>2）字段访问指令</span></a></h3>',8),P=p(`<ul><li>访问静态变量：getstatic、putstatic。</li><li>访问成员变量：getfield、putfield，需要创建对象后才能访问。</li></ul><p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Writer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">String</span> mark <span class="token operator">=</span> <span class="token string">&quot;作者&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Writer</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>main()</code> 方法的字节码指令。</p><p><img src="`+j+'" alt="Alt text"></p><ul><li><code>getstatic #2 &lt;com/itwanger/jvm/Writer.mark&gt;</code>，访问静态变量 mark</li><li><code>getfield #6 &lt;com/itwanger/jvm/Writer.name&gt;</code>，访问成员变量 name</li></ul><h2 id="方法调用和返回指令" tabindex="-1"><a class="header-anchor" href="#方法调用和返回指令"><span>方法调用和返回指令</span></a></h2><p>方法调用指令有 5 个，分别用于不同的场景：</p>',8),G=s("li",null,"invokedynamic：用于在运行时动态解析出调用点限定符所引用的方法，并执行。",-1),T=p(`<p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvokeExamples</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;难顶&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ArrayList</span> als <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        als<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;学不动了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;invokestatic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InvokeExamples</span> invoke <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokeExamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        invoke<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们用 <code>javap -c InvokeExamples.class</code> 来反编译一下。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Compiled from &quot;InvokeExamples.java&quot;
public class com.itwanger.jvm.InvokeExamples {
  public com.itwanger.jvm.InvokeExamples();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V
       4: return

  private void run();
    Code:
       0: new           #2                  // class java/util/ArrayList
       3: dup
       4: invokespecial #3                  // Method java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V
       7: astore_1
       8: aload_1
       9: ldc           #4                  // String 难顶
      11: invokeinterface #5,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      16: pop
      17: new           #2                  // class java/util/ArrayList
      20: dup
      21: invokespecial #3                  // Method java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V
      24: astore_2
      25: aload_2
      26: ldc           #6                  // String 学不动了
      28: invokevirtual #7                  // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      31: pop
      32: return

  public static void print();
    Code:
       0: getstatic     #8                  // Field java/lang/System.out:Ljava/io/PrintStream;
       3: ldc           #9                  // String invokestatic
       5: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
       8: return

  public static void main(java.lang.String[]);
    Code:
       0: invokestatic  #11                 // Method print:()V
       3: new           #12                 // class com/itwanger/jvm/InvokeExamples
       6: dup
       7: invokespecial #13                 // Method &quot;&lt;init&gt;&quot;:()V
      10: astore_1
      11: aload_1
      12: invokevirtual #14                 // Method run:()V
      15: return
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>InvokeExamples 类有 4 个方法，包括缺省的构造方法在内。</p><h3 id="_1-invokespecial" tabindex="-1"><a class="header-anchor" href="#_1-invokespecial"><span>1）invokespecial</span></a></h3><p>缺省的构造方法内部会调用超类 Object 的初始化构造方法：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\`invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-invokeinterface和invokevirtual" tabindex="-1"><a class="header-anchor" href="#_2-invokeinterface和invokevirtual"><span>2）invokeinterface和invokevirtual</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>invokeinterface #5,  2  // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),R=s("code",null,"ls.add()",-1),$=s("code",null,"invokeinterface",-1),U=s("code",null,"add()",-1),X=p(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>invokevirtual #7 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于 als 变量的引用类型已经确定为 ArrayList，所以 <code>als.add()</code> 方法调用的是 <code>invokevirtual</code> 指令。</p><h3 id="_3-invokestatic" tabindex="-1"><a class="header-anchor" href="#_3-invokestatic"><span>3）invokestatic</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>invokestatic  #11 // Method print:()V
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>print()</code> 方法是静态的，所以调用的是 <code>invokestatic</code> 指令。</p><h3 id="invokedynamic" tabindex="-1"><a class="header-anchor" href="#invokedynamic"><span>invokedynamic</span></a></h3><p><code>invokedynamic</code> 指令是 Java 7 引入的，主要是为了支持动态语言，比如 Groovy、Scala、JRuby 等。这些语言都是在运行时动态解析出调用点限定符所引用的方法，并执行。</p>`,7),K=p(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Function</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用 Lambda 表达式定义一个函数</span>
        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> square <span class="token operator">=</span> x <span class="token operator">-&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>

        <span class="token comment">// 调用这个函数</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> square<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 25</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，Lambda 表达式 <code>x -&gt; x * x</code> 定义了一个接受一个整数并返回其平方的函数。在编译这段代码时，编译器会使用 invokedynamic 指令来动态地绑定这个 Lambda 表达式。</p><p><img src="`+x+`" alt="Alt text"></p><p>①、<code>invokedynamic #2, 0</code>：使用 <code>invokedynamic</code> 调用一个引导方法（Bootstrap Method），这个方法负责实现并返回一个 <code>Function</code> 接口的实例。这里的 Lambda 表达式 <code>x -&gt; x * x</code> 被转换成了一个 <code>Function</code> 对象。引导方法在首次执行时会被调用，它负责生成一个 <code>CallSite</code>，该 <code>CallSite</code> 包含了指向具体实现 Lambda 表达式的方法句柄（Method Handle）。在这个例子中，这个方法句柄指向了 <code>lambda$main$0</code> 方法。</p><p>②、<code>astore_1</code>：将 <code>invokedynamic</code> 指令的结果（Lambda 表达式的 <code>Function</code> 对象）存储到局部变量表的位置 1。</p><p>③、Lambda 表达式的实现是：<code>lambda$main$0</code>，这是 Lambda 表达式 <code>x -&gt; x * x</code> 的实际实现。它接收一个 <code>Integer</code> 对象作为参数，计算其平方，然后返回结果。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">LambdaExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> square <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>square<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他指令这里就不再分析下去了，大家可以尝试一下，检验自己的学习成果。</p><h3 id="方法返回指令" tabindex="-1"><a class="header-anchor" href="#方法返回指令"><span>方法返回指令</span></a></h3><p>方法返回指令根据方法的返回值类型进行区分，常见的返回指令见下图，就是各种 return。</p><p><img src="`+f+`" alt="Alt text"></p><h2 id="操作数栈管理指令" tabindex="-1"><a class="header-anchor" href="#操作数栈管理指令"><span>操作数栈管理指令</span></a></h2><p>常见的操作数栈管理指令有 pop、dup 和 swap。</p><ul><li>将一个或两个元素从栈顶弹出，并且直接废弃，比如 pop，pop2；</li><li>复制栈顶的一个或两个数值并将其重新压入栈顶，比如 dup，dup2，<code>dup*×1</code>，<code>dup2*×1</code>，<code>dup*×2</code>，<code>dup2*×2</code>；</li><li>将栈最顶端的两个槽中的数值交换位置，比如 swap。</li></ul><p>这些指令不需要指明数据类型，因为是按照位置压入和弹出的。</p><p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dup</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">incAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">++</span>age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>incAndGet()</code> 方法的字节码指令。</p><p><img src="`+S+'" alt="Alt text"></p><ul><li><code>aload_0</code>：将 this 入栈。</li><li>dup：复制栈顶的 this。</li><li><code>getfield #2</code>：将常量池中下标为 2 的常量加载到栈上，同时将一个 this 出栈。</li><li><code>iconst_1</code>：将常量 1 入栈。</li><li>iadd：将栈顶的两个值相加后出栈，并将结果放回栈上。</li><li><code>dup_x1</code>：复制栈顶的元素，并将其插入 this 下面。</li><li><code>putfield #2</code>： 将栈顶的两个元素出栈，并将其赋值给字段 age。</li><li>ireturn：将栈顶的元素出栈返回。</li></ul><h2 id="控制转移指令" tabindex="-1"><a class="header-anchor" href="#控制转移指令"><span>控制转移指令</span></a></h2><p>控制转移指令包括：</p><ul><li>比较指令，比较栈顶的两个元素的大小，并将比较结果入栈。</li><li>条件跳转指令，通常和比较指令一块使用，在条件跳转指令执行前，一般先用比较指令进行栈顶元素的比较，然后进行条件跳转。</li><li>比较条件转指令，类似于比较指令和条件跳转指令的结合体，它将比较和跳转两个步骤合二为一。</li><li>多条件分支跳转指令，专为 switch-case 语句设计的。</li><li>无条件跳转指令，目前主要是 goto 指令。</li></ul>',23),Q=p(`<h3 id="_1-比较指令" tabindex="-1"><a class="header-anchor" href="#_1-比较指令"><span>1）比较指令</span></a></h3><p>比较指令有：dcmpg，dcmpl、fcmpg、fcmpl、lcmp，指令的第一个字母代表的含义分别是 double、float、long。注意，没有 int 类型。</p><p>对于 double 和 float 来说，由于 NaN 的存在，有两个版本的比较指令。拿 float 来说，有 fcmpg 和 fcmpl，区别在于，如果遇到 NaN，fcmpg 会将 1 压入栈，fcmpl 会将 -1 压入栈。</p><p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lcmp</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>lcmp()</code> 方法的字节码指令。</p><p><img src="`+L+'" alt="Alt text"></p><p>lcmp 用于两个 long 型的数据进行比较。</p><h3 id="_2-条件跳转指令" tabindex="-1"><a class="header-anchor" href="#_2-条件跳转指令"><span>2）条件跳转指令</span></a></h3><p><img src="'+q+`" alt="Alt text"></p><p>这些指令都会接收两个字节的操作数，它们的统一含义是，弹出栈顶元素，测试它是否满足某一条件，满足的话，跳转到对应位置。</p><p>对于 long、float 和 double 类型的条件分支比较，会先执行比较指令返回一个整型值到操作数栈中后再执行 int 类型的条件跳转指令。</p><p>对于 boolean、byte、char、short，以及 int，则直接使用条件跳转指令来完成。</p><p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>fi()</code> 方法的字节码指令。</p><p><img src="`+E+'" alt="Alt text"></p><p><code>3 ifne 12 (+9)</code> 的意思是，如果栈顶的元素不等于 0，跳转到第 12（3+9）行 <code>12 bipush 20</code>。</p><h3 id="_3-比较条件转指令" tabindex="-1"><a class="header-anchor" href="#_3-比较条件转指令"><span>3）比较条件转指令</span></a></h3><p><img src="'+A+`" alt="Alt text"></p><p>前缀“<code>if_</code>”后，以字符“i”开头的指令针对 int 型整数进行操作，以字符“a”开头的指令表示对象的比较。</p><p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>compare()</code> 方法的字节码指令。</p><p><img src="`+I+`" alt="Alt text"></p><p><code>11 if_icmple 18 (+7)</code> 的意思是，如果栈顶的两个 int 类型的数值比较的话，如果前者小于后者时跳转到第 18 行（11+7）。</p><h3 id="_4-多条件分支跳转指令" tabindex="-1"><a class="header-anchor" href="#_4-多条件分支跳转指令"><span>4）多条件分支跳转指令</span></a></h3><p>主要有 tableswitch 和 lookupswitch，前者要求多个条件分支值是连续的，它内部只存放起始值和终止值，以及若干个跳转偏移量，通过给定的操作数 index，可以立即定位到跳转偏移量位置，因此效率比较高；后者内部存放着各个离散的 case-offset 对，每次执行都要搜索全部的 case-offset 对，找到匹配的 case 值，并根据对应的 offset 计算跳转地址，因此效率较低。</p><p>举例来说。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">switchTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> select<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>select<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
            num <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            num <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 jclasslib 看一下 <code>switchTest()</code> 方法的字节码指令。</p><p><img src="`+z+'" alt="Alt text"></p><p>case 2 的时候没有 break，所以 case 2 和 case 3 是连续的，用的是 tableswitch。如果等于 1，跳转到 28 行；如果等于 2 和 3，跳转到 34 行，如果是 default，跳转到 40 行。</p><h3 id="_5-无条件跳转指令" tabindex="-1"><a class="header-anchor" href="#_5-无条件跳转指令"><span>5）无条件跳转指令</span></a></h3>',34),H=p(`<p>前面的例子里都出现了 goto 的身影，也很好理解。如果指令的偏移量特别大，超出了两个字节的范围，可以使用指令 goto_w，接收 4 个字节的操作数。</p><h2 id="异常处理时的字节码指令" tabindex="-1"><a class="header-anchor" href="#异常处理时的字节码指令"><span>异常处理时的字节码指令</span></a></h2><p>让我们通过一个简单的 Java 代码示例来说明异常处理时的字节码指令。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 这将导致除以零的异常</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发生算术异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译上述代码后，使用 <code>javap -c ExceptionExample</code> 可以查看其字节码，大致如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Code</span><span class="token operator">:</span>
    <span class="token number">0</span><span class="token operator">:</span> iconst_1
    <span class="token number">1</span><span class="token operator">:</span> iconst_0
    <span class="token number">2</span><span class="token operator">:</span> idiv
    <span class="token number">3</span><span class="token operator">:</span> istore_1
    <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">goto</span> <span class="token number">12</span>
    <span class="token number">7</span><span class="token operator">:</span> astore_1
    <span class="token number">8</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
    <span class="token number">11</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>  <span class="token comment">// String 发生算术异常</span>
    <span class="token number">13</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span>  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
    <span class="token number">16</span><span class="token operator">:</span> <span class="token keyword">return</span>
  <span class="token class-name">Exception</span> table<span class="token operator">:</span>
    from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type
       <span class="token number">0</span>     <span class="token number">4</span>     <span class="token number">7</span>   <span class="token class-name">Class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">ArithmeticException</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>①、除法</p><p><code>0: iconst_1</code>、<code>1: iconst_0</code>、<code>2: idiv</code> 这三个指令是执行除法运算 <code>1 / 0</code>。前两个指令将常数 1 和 0 分别推送到操作数栈，然后 <code>idiv</code> 指令执行除法操作。</p><p><code>3: istore_1</code> 将除法的结果存储到局部变量表中（这里会发生异常，指令实际上不会执行）。</p><p>②、异常处理</p><p><code>4: goto 12</code>：在 <code>try</code> 块的末尾，有一个 <code>goto</code> 指令跳过 <code>catch</code> 块的代码。</p><p><code>7: astore_1</code> 这是 <code>catch</code> 块的开始。如果捕获到异常，将异常对象存储到局部变量表。</p><p><code>8 - 13: getstatic, ldc, invokevirtual</code> 这些指令执行 <code>System.out.println(&quot;发生算术异常&quot;)</code>。</p><p><code>16: return</code> 方法返回。</p><p>Exception table 这部分定义了异常处理器。在这个例子中，当在字节码偏移量 0 到 4 之间发生 <code>ArithmeticException</code> 时，控制跳转到偏移量 7，即 <code>catch</code> 块的开始。</p>`,15),Y=s("h2",{id:"synchronized-的字节码指令",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#synchronized-的字节码指令"},[s("span",null,"synchronized 的字节码指令")])],-1),nn=p(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncBlockMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 同步块体</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的字节码大致如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncBlockMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Code</span><span class="token operator">:</span>
    <span class="token number">0</span><span class="token operator">:</span> aload_0
    <span class="token number">1</span><span class="token operator">:</span> dup
    <span class="token number">2</span><span class="token operator">:</span> astore_1
    <span class="token number">3</span><span class="token operator">:</span> monitorenter
    <span class="token number">4</span><span class="token operator">:</span> aload_1
    <span class="token number">5</span><span class="token operator">:</span> monitorexit
    <span class="token number">6</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">14</span>
    <span class="token number">9</span><span class="token operator">:</span> astore        <span class="token number">2</span>
    <span class="token number">11</span><span class="token operator">:</span> aload_1
    <span class="token number">12</span><span class="token operator">:</span> monitorexit
    <span class="token number">13</span><span class="token operator">:</span> aload         <span class="token number">2</span>
    <span class="token number">15</span><span class="token operator">:</span> athrow
    <span class="token number">16</span><span class="token operator">:</span> <span class="token keyword">return</span>
  <span class="token class-name">Exception</span> table<span class="token operator">:</span>
    from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type
        <span class="token number">4</span>     <span class="token number">6</span>     <span class="token number">9</span>   any
        <span class="token number">9</span>    <span class="token number">13</span>     <span class="token number">9</span>   any
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>monitorenter / monitorexit</code> 这两个指令用于同步块的开始和结束。<code>monitorenter</code> 指令用于获取对象的监视器锁，<code>monitorexit</code> 指令用于释放锁。</p>`,4),sn=s("hr",null,null,-1),an={href:"https://segmentfault.com/a/1190000037628881",target:"_blank",rel:"noopener noreferrer"},en=s("h2",{id:"总结",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#总结"},[s("span",null,"总结")])],-1),tn=s("p",null,"路漫漫其修远兮，吾将上下而求索。",-1),pn=s("p",null,"这节我们详细地介绍了 Java 字节码指令，包括算术指令、类型转换指令、对象的创建和访问指令、方法调用和返回指令、操作数栈管理指令、控制转移指令、异常处理时的字节码指令、synchronized 的字节码指令等。",-1),ln=s("p",null,"想要走得更远，Java 字节码指令这块就必须得硬碰硬地吃透，希望二哥的这些分享可以帮助到大家~",-1),on=s("hr",null,null,-1),cn=s("p",null,".",-1);function dn(un,rn){const e=l("RouteLink"),o=l("ExternalLinkIcon");return c(),d("div",null,[M,s("p",null,[n("大家好，我是二哥呀。字节码指令是 JVM 体系中比较难啃的一块硬骨头，我估计有些"),a(e,{to:"/docs/java/zhishixingqiu/"},{default:t(()=>[n("球友")]),_:1}),n("会有这样的疑惑，“这么难啃，我还能学会啊？”")]),C,s("p",null,[n("来吧，跟着二哥一起来学习吧，别畏难。"),a(e,{to:"/docs/java/jvm/vm-stack-register.html"},{default:t(()=>[n("前面")]),_:1}),n("我们已经讲过了，JVM 是基于栈结构的字节码指令集，那今天我们就来继续来学习，"),N,n("。")]),V,s("p",null,[n("加载（load）和存储（store）指令是使用最频繁的指令，用于将数据从"),a(e,{to:"/docs/java/jvm/vm-stack-register.html"},{default:t(()=>[n("栈帧的局部变量表和操作数栈")]),_:1}),n("之间来回传递。")]),B,s("p",null,[n("通过 "),a(e,{to:"/docs/java/jvm/how-run-java-code.html"},{default:t(()=>[n("jclasslib")]),_:1}),n(" 看一下 "),O,n(" 方法（4 个参数）的字节码指令。")]),D,s("p",null,[n("这一节可以回顾一下 "),a(e,{to:"/docs/java/basic-grammar/operator.html"},{default:t(()=>[n("Java 运算符")]),_:1}),n(" ，就可以把一些非常简单的算术运算和 JVM 关联起来了。")]),F,s("blockquote",null,[s("p",null,[n("可以回想一下前面讲过的："),a(e,{to:"/docs/java/basic-grammar/type-cast.html"},{default:t(()=>[n("自动类型转换与强制类型转换")]),_:1})])]),Z,s("p",null,[a(e,{to:"/docs/java/array/array.html"},{default:t(()=>[n("数组")]),_:1}),n("是一种特殊的对象，它创建的字节码指令和普通对象的创建指令不同。创建数组的指令有三种：")]),W,s("p",null,[a(e,{to:"/docs/java/oo/var.html"},{default:t(()=>[n("字段")]),_:1}),n("可以分为两类，一类是成员变量，一类是静态变量（也就是类变量），所以字段访问指令可以分为两类：")]),P,s("ul",null,[s("li",null,[n("invokevirtual：用于调用对象的成员方法，根据对象的实际类型进行分派，支持"),a(e,{to:"/docs/java/oo/encapsulation-inheritance-polymorphism.html"},{default:t(()=>[n("多态")]),_:1}),n("。")]),s("li",null,[n("invokeinterface：用于调用"),a(e,{to:"/docs/java/oo/interface.html"},{default:t(()=>[n("接口")]),_:1}),n("方法，会在运行时搜索由特定对象实现的接口方法进行调用。")]),s("li",null,[n("invokespecial：用于调用一些需要特殊处理的方法，包括"),a(e,{to:"/docs/java/oo/construct.html"},{default:t(()=>[n("构造方法")]),_:1}),n("、私有方法和父类方法。")]),s("li",null,[n("invokestatic：用于调用"),a(e,{to:"/docs/java/oo/method.html#_05%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95"},{default:t(()=>[n("静态方法")]),_:1}),n("。")]),G]),T,s("p",null,[n("由于 ls 变量的引用类型为接口 List，所以 "),R,n(" 调用的是 "),$,n(" 指令，等运行时再确定是不是接口 List 的实现对象 "),a(e,{to:"/docs/java/collection/arraylist.html"},{default:t(()=>[n("ArrayList")]),_:1}),n(" 的 "),U,n(" 方法。")]),X,s("p",null,[n("看下面这段代码，用到了 "),a(e,{to:"/docs/java/java8/Lambda.html"},{default:t(()=>[n("Lambda 表达式")]),_:1}),n("，Lambda 表达式的实现就依赖于 invokedynamic 指令：")]),K,s("p",null,[n("和之前学过《"),a(e,{to:"/docs/java/basic-grammar/flow-control.html"},{default:t(()=>[n("流程控制语句")]),_:1}),n("》就关联了起来。")]),Q,s("p",null,[a(e,{to:"/docs/java/basic-extra-meal/48-keywords.html"},{default:t(()=>[n("goto 指令")]),_:1}),n("接收两个字节的操作数，共同组成一个带符号的整数，用于指定指令的偏移量，指令执行的目的就是跳转到偏移量给定的位置处。")]),H,s("p",null,[n("详细大家经过这里例子可以和前面学过的《"),a(e,{to:"/docs/java/exception/gailan.html"},{default:t(()=>[n("异常处理")]),_:1}),n("》关联起来。")]),Y,s("p",null,[n("好，我们再来看一个关于 "),a(e,{to:"/docs/java/thread/synchronized-1.html"},{default:t(()=>[n("synchronized")]),_:1}),n(" 关键字的示例，就一个简单的同步代码块：")]),nn,s("p",null,[n("希望大家通过这个简单的示例，把前面学过的《"),a(e,{to:"/docs/java/thread/synchronized-1.html"},{default:t(()=>[n("synchronized")]),_:1}),n("》关键字关联起来。")]),sn,s("blockquote",null,[s("p",null,[n("推荐阅读："),s("a",an,[n("https://segmentfault.com/a/1190000037628881"),a(o)])])]),en,tn,pn,ln,on,cn])}const vn=i(J,[["render",dn],["__file","zijiemazhiling.html.vue"]]),mn=JSON.parse('{"path":"/docs/java/jvm/zijiemazhiling.html","title":"字节码指令","lang":"en-US","frontmatter":{"title":"字节码指令"},"headers":[{"level":2,"title":"加载与存储指令","slug":"加载与存储指令","link":"#加载与存储指令","children":[{"level":3,"title":"1）将局部变量表中的变量压入操作数栈中","slug":"_1-将局部变量表中的变量压入操作数栈中","link":"#_1-将局部变量表中的变量压入操作数栈中","children":[]},{"level":3,"title":"2）将常量池中的常量压入操作数栈中","slug":"_2-将常量池中的常量压入操作数栈中","link":"#_2-将常量池中的常量压入操作数栈中","children":[]},{"level":3,"title":"3）将栈顶的数据出栈并装入局部变量表中","slug":"_3-将栈顶的数据出栈并装入局部变量表中","link":"#_3-将栈顶的数据出栈并装入局部变量表中","children":[]}]},{"level":2,"title":"算术指令","slug":"算术指令","link":"#算术指令","children":[]},{"level":2,"title":"类型转换指令","slug":"类型转换指令","link":"#类型转换指令","children":[]},{"level":2,"title":"对象的创建和访问指令","slug":"对象的创建和访问指令","link":"#对象的创建和访问指令","children":[{"level":3,"title":"1）创建指令","slug":"_1-创建指令","link":"#_1-创建指令","children":[]},{"level":3,"title":"2）字段访问指令","slug":"_2-字段访问指令","link":"#_2-字段访问指令","children":[]}]},{"level":2,"title":"方法调用和返回指令","slug":"方法调用和返回指令","link":"#方法调用和返回指令","children":[{"level":3,"title":"1）invokespecial","slug":"_1-invokespecial","link":"#_1-invokespecial","children":[]},{"level":3,"title":"2）invokeinterface和invokevirtual","slug":"_2-invokeinterface和invokevirtual","link":"#_2-invokeinterface和invokevirtual","children":[]},{"level":3,"title":"3）invokestatic","slug":"_3-invokestatic","link":"#_3-invokestatic","children":[]},{"level":3,"title":"invokedynamic","slug":"invokedynamic","link":"#invokedynamic","children":[]},{"level":3,"title":"方法返回指令","slug":"方法返回指令","link":"#方法返回指令","children":[]}]},{"level":2,"title":"操作数栈管理指令","slug":"操作数栈管理指令","link":"#操作数栈管理指令","children":[]},{"level":2,"title":"控制转移指令","slug":"控制转移指令","link":"#控制转移指令","children":[{"level":3,"title":"1）比较指令","slug":"_1-比较指令","link":"#_1-比较指令","children":[]},{"level":3,"title":"2）条件跳转指令","slug":"_2-条件跳转指令","link":"#_2-条件跳转指令","children":[]},{"level":3,"title":"3）比较条件转指令","slug":"_3-比较条件转指令","link":"#_3-比较条件转指令","children":[]},{"level":3,"title":"4）多条件分支跳转指令","slug":"_4-多条件分支跳转指令","link":"#_4-多条件分支跳转指令","children":[]},{"level":3,"title":"5）无条件跳转指令","slug":"_5-无条件跳转指令","link":"#_5-无条件跳转指令","children":[]}]},{"level":2,"title":"异常处理时的字节码指令","slug":"异常处理时的字节码指令","link":"#异常处理时的字节码指令","children":[]},{"level":2,"title":"synchronized 的字节码指令","slug":"synchronized-的字节码指令","link":"#synchronized-的字节码指令","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1715269884000,"updatedTime":1715269884000,"contributors":[{"name":"dong","email":"dwx_job@163.com","commits":1}]},"filePathRelative":"docs/java/jvm/字节码指令.md"}');export{vn as comp,mn as data};
