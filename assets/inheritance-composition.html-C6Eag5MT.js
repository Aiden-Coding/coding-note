import{_ as r,r as c,o as i,c as d,a as e,b as t,d as n,e as a}from"./app-BihAYnmf.js";const l={},s=a('<p>在前面几篇文章中，我们了解了封装、继承、多态是面向对象的三个特征。并且通过对继承和实现的学习，了解到继承可以帮助我实现类的复用。</p><p>所以，很多开发人员在需要复用一些代码的时候会很自然的使用类的继承的方式。</p><p>但是，遇到想要复用的场景就直接使用继承，这样做是不对的。长期大量的使用继承会给代码带来很高的维护成本。</p><p>本文将介绍一种可以帮助我们复用的新的概念——组合，通过学习组合和继承的概念及区别，并从多方面帮大家分析在写代码时如何进行选择。</p><h2 id="面向对象的复用技术" tabindex="-1"><a class="header-anchor" href="#面向对象的复用技术"><span>面向对象的复用技术</span></a></h2><p>前面提到复用，这里就简单介绍一下面向对象的复用技术。</p><p>复用性是面向对象技术带来的很棒的潜在好处之一。如果运用的好的话可以帮助我们节省很多开发时间，提升开发效率。但是，如果被滥用那么就可能产生很多难以维护的代码。</p><p>作为一门面向对象开发的语言，代码复用是Java引人注意的功能之一。Java代码的复用有继承，组合以及代理三种具体的表现形式。本文将重点介绍继承复用和组合复用。</p><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h2>',9),p={href:"https://zh.wikipedia.org/wiki/Is-a",target:"_blank",rel:"noopener noreferrer"},h=e("code",null,"is-a",-1),_=e("blockquote",null,[e("p",null,'is-a：表示"是一个"的关系，如狗是一个动物')],-1),u=e("p",null,[e("img",{src:"http://www.hollischuang.com/wp-content/uploads/2016/03/Generalization.jpg",alt:"Inheritance"})],-1),m=e("h2",{id:"组合",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#组合"},[e("span",null,"组合")])],-1),g={href:"https://en.wikipedia.org/wiki/Has-a",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"has-a",-1),k=a('<blockquote><p>has-a：表示&quot;有一个&quot;的关系，如狗有一个尾巴</p></blockquote><p><img src="http://www.hollischuang.com/wp-content/uploads/2016/03/Composition.jpg" alt="Composition"></p><h2 id="组合与继承的区别和联系" tabindex="-1"><a class="header-anchor" href="#组合与继承的区别和联系"><span>组合与继承的区别和联系</span></a></h2><blockquote><p>在<code>继承</code>结构中，父类的内部细节对于子类是可见的。所以我们通常也可以说通过继承的代码复用是一种<code>白盒式代码复用</code>。（如果基类的实现发生改变，那么派生类的实现也将随之改变。这样就导致了子类行为的不可预知性；）</p><p><code>组合</code>是通过对现有的对象进行拼装（组合）产生新的、更复杂的功能。因为在对象之间，各自的内部细节是不可见的，所以我们也说这种方式的代码复用是<code>黑盒式代码复用</code>。（因为组合中一般都定义一个类型，所以在编译期根本不知道具体会调用哪个实现类的方法）</p><p><code>继承</code>，在写代码的时候就要指名具体继承哪个类，所以，在<code>编译期</code>就确定了关系。（从基类继承来的实现是无法在运行期动态改变的，因此降低了应用的灵活性。）</p><p><code>组合</code>，在写代码的时候可以采用面向接口编程。所以，类的组合关系一般在<code>运行期</code>确定。</p></blockquote><h2 id="优缺点对比" tabindex="-1"><a class="header-anchor" href="#优缺点对比"><span>优缺点对比</span></a></h2><table><thead><tr><th>组 合 关 系</th><th>继 承 关 系</th></tr></thead><tbody><tr><td>优点：不破坏封装，整体类与局部类之间松耦合，彼此相对独立</td><td>缺点：破坏封装，子类与父类之间紧密耦合，子类依赖于父类的实现，子类缺乏独立性</td></tr><tr><td>优点：具有较好的可扩展性</td><td>缺点：支持扩展，但是往往以增加系统结构的复杂度为代价</td></tr><tr><td>优点：支持动态组合。在运行时，整体对象可以选择不同类型的局部对象</td><td>缺点：不支持动态继承。在运行时，子类无法选择不同的父类</td></tr><tr><td>优点：整体类可以对局部类进行包装，封装局部类的接口，提供新的接口</td><td>缺点：子类不能改变父类的接口</td></tr><tr><td>缺点：整体类不能自动获得和局部类同样的接口</td><td>优点：子类能自动继承父类的接口</td></tr><tr><td>缺点：创建整体类的对象时，需要创建所有局部类的对象</td><td>优点：创建子类的对象时，无须创建父类的对象</td></tr></tbody></table><h2 id="如何选择" tabindex="-1"><a class="header-anchor" href="#如何选择"><span>如何选择</span></a></h2><p>相信很多人都知道面向对象中有一个比较重要的原则『多用组合、少用继承』或者说『组合优于继承』。从前面的介绍已经优缺点对比中也可以看出，组合确实比继承更加灵活，也更有助于代码维护。</p><p>所以，</p><blockquote><p><strong><code>建议在同样可行的情况下，优先使用组合而不是继承。</code></strong></p><p><strong><code>因为组合更安全，更简单，更灵活，更高效。</code></strong></p></blockquote><p>注意，并不是说继承就一点用都没有了，前面说的是【在同样可行的情况下】。有一些场景还是需要使用继承的，或者是更适合使用继承。</p>',11),v={href:"http://s.click.taobao.com/t?e=m%3D2%26s%3DHzJzud6zOdocQipKwQzePOeEDrYVVa64K7Vc7tFgwiHjf2vlNIV67vo5P8BMUBgoEC56fBbgyn5pS4hLH%2FP02ckKYNRBWOBBey11vvWwHXSniyi5vWXIZhtlrJbLMDAQihpQCXu2JnPFYKQlNeOGCsYMXU3NNCg%2F&pvid=10_125.119.86.125_222_1458652212179",target:"_blank",rel:"noopener noreferrer"},f={href:"https://zh.wikipedia.org/wiki/Is-a",target:"_blank",rel:"noopener noreferrer"},w=e("code",null,"is-a",-1),B={href:"http://s.click.taobao.com/t?e=m%3D2%26s%3DwIPn8%2BNPqLwcQipKwQzePOeEDrYVVa64K7Vc7tFgwiHjf2vlNIV67vo5P8BMUBgoUOZr0mLjusdpS4hLH%2FP02ckKYNRBWOBBey11vvWwHXSniyi5vWXIZvgXwmdyquYbNLnO%2BjzYQLqKnzbV%2FMLqnMYMXU3NNCg%2F&pvid=10_125.119.86.125_345_1458652241780",target:"_blank",rel:"noopener noreferrer"};function N(q,x){const o=c("ExternalLinkIcon");return i(),d("div",null,[s,e("p",null,[t("前面的章节中重点介绍过继承，我们说继承是类与类或者接口与接口之间最常见的一种关系；继承是一种"),e("a",p,[h,n(o)]),t("关系。")]),_,u,m,e("p",null,[t("组合(Composition)体现的是整体与部分、拥有的关系，即"),e("a",g,[b,n(o)]),t("的关系。")]),k,e("blockquote",null,[e("p",null,[t("继承要慎用，其使用场合仅限于你确信使用该技术有效的情况。一个判断方法是，问一问自己是否需要从新类向基类进行向上转型。如果是必须的，则继承是必要的。反之则应该好好考虑是否需要继承。《"),e("a",v,[t("Java编程思想"),n(o)]),t("》")]),e("p",null,[t("只有当子类真正是超类的子类型时，才适合用继承。换句话说，对于两个类A和B，只有当两者之间确实存在"),e("a",f,[w,n(o)]),t("关系的时候，类B才应该继承类A。《"),e("a",B,[t("Effective Java"),n(o)]),t("》")])])])}const j=r(l,[["render",N],["__file","inheritance-composition.html.vue"]]),z=JSON.parse('{"path":"/docs/java/object-oriented/inheritance-composition.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"面向对象的复用技术","slug":"面向对象的复用技术","link":"#面向对象的复用技术","children":[]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":2,"title":"组合","slug":"组合","link":"#组合","children":[]},{"level":2,"title":"组合与继承的区别和联系","slug":"组合与继承的区别和联系","link":"#组合与继承的区别和联系","children":[]},{"level":2,"title":"优缺点对比","slug":"优缺点对比","link":"#优缺点对比","children":[]},{"level":2,"title":"如何选择","slug":"如何选择","link":"#如何选择","children":[]}],"git":{"createdTime":1715384499000,"updatedTime":1715384499000,"contributors":[{"name":"dong","email":"dwx_job@163.com","commits":1}]},"filePathRelative":"docs/java/object-oriented/inheritance-composition.md"}');export{j as comp,z as data};
